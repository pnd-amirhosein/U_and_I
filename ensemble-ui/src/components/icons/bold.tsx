import { Component, Prop, h, Host, Element } from '@stencil/core';

@Component({
  tag: 'eui-icon-bold',
  shadow: false,
})
export class EUIIconBold {
  @Element() hostEl!: HTMLElement;
  @Prop() type : "solid" | "outline" | "mini" | "micro" = "solid";

  getSvg() {
    switch (this.type) {
      case 'solid': return `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M5.24683 3.74433C5.24683 3.3301 5.58262 2.99429 5.99684 2.99429H13.1217C15.8141 2.99429 17.9966 5.17716 17.9966 7.86973C17.9966 9.26692 17.409 10.5269 16.4673 11.4158C17.844 12.3623 18.7466 13.9485 18.7466 15.7455C18.7466 18.6452 16.3962 20.996 13.4967 20.996H5.99684C5.58262 20.996 5.24683 20.6602 5.24683 20.2459V3.74433ZM12.3717 10.495C13.8214 10.495 14.9966 9.3197 14.9966 7.86973C14.9966 6.41976 13.8214 5.24445 12.3717 5.24445H8.24683V10.495H12.3717ZM8.24683 12.7452V18.7458H12.7467C14.4035 18.7458 15.7466 17.4026 15.7466 15.7455C15.7466 14.0884 14.4035 12.7452 12.7467 12.7452H8.24683Z" fill="black"/>
</svg>
`;
      case 'outline': return `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M6.75013 3.74429H5.99683V11.995H13.1218C15.4 11.995 17.2468 10.148 17.2468 7.86965C17.2468 5.59128 15.4 3.74429 13.1218 3.74429H6.75013ZM6.75013 3.74429V4.12506M6.75013 20.2457H13.4968C15.9821 20.2457 17.9968 18.2308 17.9968 15.7453C17.9968 13.2598 15.9821 11.2449 13.4968 11.2449H5.99683V20.2457H6.75013ZM6.75013 20.2457V19.8753M6.75013 4.12506H12.7502C14.8213 4.12506 16.5002 5.80402 16.5002 7.87512C16.5002 9.94621 14.8213 11.6252 12.7502 11.6252H6.75013M6.75013 4.12506V11.6252M6.75013 11.6252V19.8753M6.75013 11.6252H13.1252C15.4034 11.6252 17.2502 13.472 17.2502 15.7502C17.2502 18.0284 15.4034 19.8753 13.1252 19.8753H6.75013M7.49683 4.49436H12.3718C14.2358 4.49436 15.7468 6.00553 15.7468 7.86965C15.7468 9.73377 14.2358 11.2449 12.3718 11.2449H7.49683V4.49436ZM7.49683 11.995H12.7468C14.8179 11.995 16.4968 13.6741 16.4968 15.7453C16.4968 17.8166 14.8179 19.4957 12.7468 19.4957H7.49683V11.995Z" stroke="black" stroke-width="1.5" stroke-linejoin="round"/>
</svg>
`;
      case 'mini': return `<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M4 3C4 2.44772 4.44772 2 5 2H11C13.4853 2 15.5 4.01472 15.5 6.5C15.5 7.69501 15.0342 8.78123 14.2742 9.58698C15.3283 10.4582 16 11.7757 16 13.25C16 15.8734 13.8734 18 11.25 18H5C4.44772 18 4 17.5523 4 17V3ZM6.5 8.5V4.5H11C12.1046 4.5 13 5.39543 13 6.5C13 7.60457 12.1046 8.5 11 8.5H6.5ZM6.5 11V15.5H11.25C12.4926 15.5 13.5 14.4926 13.5 13.25C13.5 12.0074 12.4926 11 11.25 11H6.5Z" fill="black"/>
</svg>
`;
      case 'micro': return `<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M3 3C3 2.44772 3.44772 2 4 2H9C10.933 2 12.5 3.567 12.5 5.5C12.5 6.26179 12.2566 6.96674 11.8434 7.54133C12.5562 8.22395 13 9.18514 13 10.25C13 12.3211 11.3211 14 9.25 14H4C3.44772 14 3 13.5523 3 13V3ZM5.5 6.5V4.5H9C9.55228 4.5 10 4.94772 10 5.5C10 6.05228 9.55228 6.5 9 6.5H5.5ZM5.5 9V11.5H9.25C9.94036 11.5 10.5 10.9404 10.5 10.25C10.5 9.55964 9.94036 9 9.25 9H5.5Z" fill="black"/>
</svg>
`;
      default:
        return '';
    }
  }

  render() {
    const svg = this.getSvg();
    const attrs = Array.from(this.hostEl.attributes)
      .filter(attr => !['type', 'class'].includes(attr.name))
      .reduce((acc:any, attr) => {
        acc[attr.name] = attr.value;
        return acc;
      }, {});
      
    return (
      <Host>
        <div {...attrs} innerHTML={svg}></div>
      </Host>
    );
  }
}
